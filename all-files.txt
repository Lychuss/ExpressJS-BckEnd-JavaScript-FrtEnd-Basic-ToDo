import  express from 'express';
import { router } from './Controller/routes.js';
import cors from 'cors';

const app = express();

app.use(express.json());
app.use(cors({
    origin: '*'
}));
app.use('/', router);

app.listen(5000, () => {
    console.log('Server listening to port 5000');
})import * as logics from '/ExpressJS-ToDoList/BackEnd/Services/logics.js';
import bcrypt from 'bcrypt';
import express from 'express';
import { createToken, authenticated, getUser } from '/ExpressJS-ToDoList/BackEnd/Middlewares/authentication.js';


export const router = express();

router.get('/', (req, res) => {
    res.send('Hello to my page!');
});

router.post('/auth/signup', async (req, res) => {
    const {username, email, password} = req.body;

    const duplicate = await logics.duplicate(username, email);

    console.log(logics.duplicate(username, email));

    if(duplicate.rowCount != 0) return res.status(400).json({message: 'Username or email is already used!'});

    //Like its an encryption for hashing
    const bcryptPass = await bcrypt.genSalt(10);

    //It hash the password using the encrpytion which is 10
    const hashPass = await bcrypt.hash(password, bcryptPass);

    await logics.newUser(username, email, hashPass);
    
    res.status(200).json({message: 'Sign up successfully'});
    window.location.href = '/FrontEnd/Interface/login.html';
});

router.post('/auth/login', async (req, res) => {
    const {username, password} = req.body;

    //Query in the postgres to get the users
    const user = await logics.user(username);
    const foundUser = user.rows[0];

    //Check if the query has found a user
    if(user.rowCount === 0){
        console.log('The username is incorrect!');
        return res.status(404).send('Incorrect username!');
    }

    /*
      A boolean checking if the password and the hash password
      is equal
    */
    const unhashPass = await bcrypt.compare(password, foundUser.password);

    if(!unhashPass) return res.status(404).send('Incorrect password!');

    const token = createToken(foundUser.username, password);
    const userId = foundUser.user_id;

    return res.status(200).json({ token, userId });
});

router.post('/tasks/add/:userId', authenticated, async (req, res) => {
    try {
        console.log('hello');

        const userId = req.params.userId;
        const { task, date } = req.body;

        logics.addItem(task, date, userId);

        return res.status(200).json({ success: 'You have fully added a task'});

    } catch (err){
        return res.status(401);
    }
});

router.get('/getTasks/:userId', authenticated, async (req, res) => {
    try {

        const userId = req.params.userId;

        const data = await logics.getTasks(userId);

        const datas = data.rows[0];

        console.log(datas);
        
        const { tasks, date, id } = datas;

        return res.status(200).json({ tasks, date, id });

    } catch (err){
        console.log(err);
        return res.json({ error: 'There is an error'}); 
    }
});

router.delete('/removeTasks/:userId/:taskId', authenticated, (req, res) => {
    try {
        const userId = req.params.userId;
        const taskId = req.params.taskId;

        logics.removeTask(userId, taskId);

        return res.status(204).json({message: 'success'});
    } catch (err) {
        return res.status(400);
    }
});






import pkg  from 'pg';

const { Pool } = pkg;

export const pool = new Pool({
    user: 'postgres',
    password: 'Tokitoclaude0907@',
    host: 'localhost',
    port: 5432,
    database: 'Express-ToDo'
});

CREATE DATABASE Express-ToDO;

CREATE TABLE users (
    user_id BIGSERIAL PRIMARY KEY,
    username VARCHAR NOT NULL,
    password VARCHAR NOT NULL
);

CREATE TABLE tasks (
    id BIGSERIAL PRIMARY KEY,
    tasks VARCHAR NOT NULL,
    date DATE NOT NULL,
    user_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

SELECT * FROM users WHERE username = username
OR users.email = email;

INSERT INTO items (
    item_name, 
    item_type, 
    item_quantity
)
 VALUES (item_name, item_type, item_quantity);
 
INSERT INTO users (
    username,
    email, 
    password
) 
 VALUES (username, email, password);

SELECT users.username, users.password FROM users 
WHERE username = username;

SELECT tasks.tasks, tasks.date FROM tasks
WHERE user_id = 9 
ORDER BY tasks DESC LIMIT 1;import jwt from 'jsonwebtoken';

const SECRET_KEY = 'cfc441f8ca1d0058aab81d8d6eaeb975267b06d6683a5e1026795cbf37fa6a7f';

//Create a token for authentication
export const createToken = (userUsername, userPassword) => {
    const payload = {username: userUsername, password: userPassword};

    const token = jwt.sign(payload, SECRET_KEY, {expiresIn: '1h'});

    return token;
};

export const getUser = (token) => {
    return jwt.verify(token, SECRET_KEY, (err, decode) => {
        if(err){
            return null;
        }
        console.log(decode);
        return decode.username
    });
};

export const authenticated = (req, res, next) => {
    
    const bearerHeader = req.headers['authorization'];
    const token = bearerHeader && bearerHeader.split(' ')[1];

    if(!token) return res.status(403).json('Not valid!');

    jwt.verify(token, SECRET_KEY, (err, decode) => {
        if(err) return res.status(403).json('Not valid!');
        req.user = decode;
        next();
    });
};

import { pool } from '/ExpressJS-ToDoList/BackEnd/Database/database.js';

export async function duplicate(username, email){
    return await pool.query(
        `SELECT * FROM users WHERE username = $1
         OR users.email = $2`, [username, email]
    );
}    

export async function newUser(username, email, hashPass){
    return await pool.query(
        `INSERT INTO users (username, email, password) VALUES ($1, $2, $3)`,
        [username, email, hashPass]
    );
}

export async function user(username){
    return await pool.query(
        `SELECT * FROM users WHERE username = $1`,
        [username]
    );
}

export async function getUserId(username){
    return await pool.query(
        `SELECT users.user_id FROM users WHERE username = $1`,
        [username]
    );
}

export async function addItem(task, date, userId) {
    return await pool.query(
        `INSERT INTO tasks (tasks, date, user_id) VALUES ($1, $2, $3)`,
        [task, date, userId]
    );
}

export async function getTasks(userId){
    return await pool.query(
        `SELECT tasks.tasks, tasks.date, tasks.Id FROM tasks WHERE user_id = $1
         ORDER BY id DESC LIMIT 1;`, [ userId ]
    );
}

export async function removeTask(userId, taskId){
    return await pool.query(
        `DELETE FROM tasks WHERE user_id = $1 AND tasks.Id = $2;`, 
        [userId, taskId]
    );
}<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Modern To-Do â€” HTML & CSS Only</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="styles.css">
</head>
<body>

  <!-- Hidden controls for CSS-only behaviors -->
  <input type="radio" name="filter" id="filter-all" hidden checked>
  <input type="radio" name="filter" id="filter-active" hidden>
  <input type="radio" name="filter" id="filter-completed" hidden>

  <div class="container">
    <input type="checkbox" id="theme-toggle" hidden>
    <div class="app">

      <!-- Sidebar -->
      <aside class="sidebar glass">
        <div class="brand">
          <div class="logo" aria-hidden="true"></div>
          <div>
            <h1>FlowTasks</h1>
          </div>
        </div>

        <div class="toggle" role="group" aria-label="Theme toggle">
          <span>Theme</span>
          <label class="switch" for="theme-toggle">
            <input type="checkbox" aria-label="Toggle dark theme">
            <span class="track" aria-hidden="true"></span>
            <span class="thumb" aria-hidden="true"></span>
          </label>
        </div>

        <nav aria-label="Filters">
          <label for="filter-all" class="nav-btn" role="button">
            <span>ðŸ“‹</span>
            <span>All Tasks</span>
          </label>
          <label for="filter-active" class="nav-btn" role="button">
            <span>âšª</span>
            <span>Active</span>
          </label>
          <label for="filter-completed" class="nav-btn" role="button">
            <span>âœ…</span>
            <span>Completed</span>
          </label>
        </nav>
      </aside>

      <!-- Main -->
      <main class="main">
        <header class="hero">
          <h2 class="title">Plan your day</h2>
          <div class="quick-actions">
            <a class="btn" href="#tasks">Jump to tasks</a>
          </div>
        </header>

        <section id="tasks" class="tasks">
          <input id="task" class="task glass add-card" aria-labelledby="addLabel">
          <button id="button-add" type="submit">
          <img id="add" src="/FrontEnd/images/add.png" alt="add" class="add">
          </button>
          </article>
          <section id="allTask">
            
          </section> 
        </section> 
      </main>

    </div>
  </div>
  <script src="/FrontEnd/Service/home.js" type="module"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Login & Sign Up</title>
<link rel="stylesheet" href="styles.css">
</head>
<body>
<div class="auth-container">
  <h2>Login</h2>
  <form>
    <input id="username" type="text" placeholder="Username" required>
    <input id="password" type="password" placeholder="Password" required>
    <button id="button" type="button">Login</button>
  </form>
  <div class="switch">
    Don't have an account? <a href="signup.html">Sign Up</a>
  </div>
  <small>&copy; 2025 MyWebsite</small>
</div>
<script src="/FrontEnd/Service/login.js"></script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Login & Sign Up</title>
<link rel="stylesheet" href="styles.css">
</head>
<body>

<div class="auth-container">
  <h2>Sign Up</h2>
  <form>
    <input id="username" type="text" placeholder="Username" required>
    <input id="email" type="email" placeholder="Email" required>
    <input id="password" type="password" placeholder="Password" required>
    <input id="confirm" type="password" placeholder="Confirm Password" required>
    <p id="text"></p>
    <button id="button" type="button">Sign Up</button>
  </form>
  <div class="switch">
    Already have an account? <a href="login.html">Login</a>
  </div>
  <small>&copy; 2025 MyWebsite</small>
</div>
<script src="/FrontEnd/Service/signup.js"></script>
</body>
</html>
/* styles.css - Modern Responsive To-Do List + Login/Signup */

/* ===== Reset ===== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  font-family: 'Inter', sans-serif;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: #fff;
  height: 100%;
}

/* ===== Layout ===== */
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
  min-height: 100vh;
}

.app {
  display: grid;
  grid-template-columns: 250px 1fr;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  overflow: hidden;
  width: 100%;
  max-width: 1200px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.2);
}

/* ===== Sidebar ===== */
.sidebar {
  background: rgba(255, 255, 255, 0.08);
  padding: 2rem 1rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.sidebar .brand {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.logo {
  width: 40px;
  height: 40px;
  background: #fff;
  border-radius: 50%;
}

.nav-btn {
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 1rem;
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: background 0.3s;
}

.nav-btn:hover {
  background: rgba(255, 255, 255, 0.2);
}

.badge {
  background: #fff;
  color: #333;
  padding: 0 6px;
  border-radius: 6px;
  font-size: 0.8rem;
}

/* ===== Main ===== */
.main {
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.hero .title {
  font-size: 2rem;
  font-weight: 700;
}

.hero .subtitle {
  margin-top: 0.5rem;
  color: rgba(255, 255, 255, 0.7);
}

.quick-actions .btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  margin-top: 1rem;
  margin-right: 0.5rem;
  border-radius: 8px;
  background: #fff;
  color: #333;
  text-decoration: none;
  font-weight: 500;
  transition: transform 0.3s;
}

.quick-actions .btn:hover {
  transform: translateY(-2px);
}

.btn.ghost {
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.5);
  color: #fff;
}

/* ===== Tasks ===== */
.tasks {
  position: relative;
  display: grid;
  gap: 1rem;
}

.task {
  display: flex;
  margin-right: 70px; 
  gap: 1rem;
  align-items: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  transition: background 0.3s;
}

.task:hover {
  background: rgba(255, 255, 255, 0.2);
}

.tick input {
  display: none;
}

.tick .box {
  width: 20px;
  height: 20px;
  border: 2px solid #fff;
  border-radius: 4px;
  display: inline-block;
  position: relative;
  cursor: pointer;
}

.tick input:checked + .box::after {
  content: 'âœ“';
  position: absolute;
  top: -4px;
  left: 3px;
  color: #fff;
  font-weight: bold;
}

/* ===== Footer ===== */
footer {
  font-size: 0.85rem;
  color: rgba(255, 255, 255, 0.7);
  text-align: center;
  margin-top: auto;
}

/* ===== Responsive ===== */
@media (max-width: 768px) {
  .app {
    grid-template-columns: 1fr;
  }

  .sidebar {
    flex-direction: row;
    justify-content: space-between;
    padding: 1rem;
  }

  .main {
    padding: 1rem;
  }
}

.add {
  width: 20px;
  height: 20px;
  pointer-events: none;
  cursor: pointer;
}

/* ===== Modern Login & Signup Styles ===== */
.auth-container {
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  width: 350px;
  max-width: 90%;
  padding: 40px 30px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.3);
  margin: 2rem auto;
  color: #fff;
}

.auth-container h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #fff;
}

.auth-container input[type="text"],
.auth-container input[type="email"],
.auth-container input[type="password"] {
  width: 100%;
  padding: 12px 15px;
  margin-bottom: 20px;
  border: 1px solid rgba(255,255,255,0.5);
  border-radius: 8px;
  outline: none;
  background: rgba(255,255,255,0.1);
  color: #fff;
}

.auth-container input:focus {
  border-color: #fff;
  box-shadow: 0 0 5px rgba(255,255,255,0.5);
}

.auth-container button {
  width: 100%;
  padding: 12px;
  background: #fff;
  color: #333;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  transition: 0.3s;
}

.auth-container button:hover {
  background: rgba(255,255,255,0.8);
}

.auth-container .switch {
  text-align: center;
  margin-top: 15px;
  font-size: 14px;
  color: rgba(255,255,255,0.7);
}

.auth-container .switch a {
  color: #fff;
  text-decoration: none;
  font-weight: bold;
}

.auth-container .switch a:hover {
  color: #ffd700;
}

#text {
  color: lightcoral;
  font-weight: bold;
  font-size: 12px;
  position: absolute;
  top: 330px;
  margin-left: 5px;
}

#button-add {
  position: absolute;
  top: 15px;
  left: 830px;
  border: none;
  border-radius: 20px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: #fff;
  margin-right: 900px;
  cursor: pointer;
}

.displaytask{
  text-align: start;
  display: flex;
  margin-right: 60px;
  font-weight: lighter;
  font-size: 12px;
  padding: 10px;
  color: black;
  border: solid black;
  background-color: white;
  border-radius: 20px;
}

.remove {
  cursor: pointer;
  height: 30px;
  width: 30px;
  position:absolute;
  left: 830px;
  border: none;
  border-radius: 20px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: #fff;
  margin-right: 900px;
  cursor: pointer;
}

#allTask {
  display: flex;
  flex-direction: column;
  gap: 20px;
}
import * as websitelogics from './websitelogic.js';

const add = document.getElementById('button-add');
const tasks = document.getElementById('tasks');
const task = document.getElementById('task');
const allTask = document.getElementById('allTask');

const userTasks = JSON.parse(localStorage.getItem('tasks')) || []; 
const userId = JSON.parse(localStorage.getItem('user'));

window.addEventListener('DOMContentLoaded', displayTask);

add.addEventListener('click', async () => {

    await websitelogics.addTasks(userId.userId, userId.token, task);
    
    const response = await websitelogics.getTasks(userId.userId, userId.token);

    if(allTask.childElementCount != 0) allTask.innerHTML = '';

    userTasks.push(response);
    localStorage.setItem('tasks', JSON.stringify(userTasks));

    displayTask();
});

function displayTask(){
        console.log(userTasks);

        for(let i = 0; i < userTasks.length; i++){
        const createDiv = document.createElement('div');
        createDiv.className = 'displaytask';
        createDiv.id = userTasks[i].id;

        console.log(userTasks[i].id);

        const h1 = document.createElement('h1');
        h1.textContent = userTasks[i].tasks;
        h1.className = 'taskClass';

        const createImg = document.createElement('img');
        createImg.onclick = async () => {
            if(createDiv.id === userTasks[i].id){
                userTasks.splice[1, i];
                localStorage.setItem('tasks', JSON.stringify(userTasks));
            }
            createDiv.remove();
            console.log(createDiv.id);
            websitelogics.removeTask(userId.userId, createDiv.id, userId.token);
        };
        
        createImg.className = 'remove';
        createImg.alt = 'remove';
        createImg.src = '/FrontEnd/images/remove.png';

        createDiv.append(h1, createImg);

        allTask.appendChild(createDiv);

        console.log('whatt');
    }
}


const username = document.getElementById('username');
const password = document.getElementById('password');
const button = document.getElementById('button');

button.addEventListener('click', async () => {
    const getUsername = username.value;
    const getPassword = password.value;
    
    const response = await fetch('http://localhost:5000/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify ({
            username: getUsername,
            password: getPassword
        })
    });

    const data = await response.json();
    console.log(data);  

    if(data != null){
        localStorage.setItem('user', JSON.stringify(data));
        window.location.href = '/FrontEnd/Interface/index.html';
    }
});

const username = document.getElementById('username');
const email = document.getElementById('email');
const password = document.getElementById('password');
const confirm = document.getElementById('confirm');
const text = document.getElementById('text');
const button = document.getElementById('button');

button.addEventListener('click', async () => {
    console.log(username.value, email.value, password.value);

    if(confirm.value === password.value){
    const response = await fetch('http://localhost:5000/auth/signup', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            username: username.value,
            email: email.value,
            password: password.value,
        })
    });
    console.log(response.status);
    if(response.status === 200){
        window.location.href = '/FrontEnd/Interface/login.html';
    } 
  } else {
     text.textContent = 'Incorrect confirm password'
  }
});export async function addTasks(userId, token, task){
    const response = await fetch(`http://localhost:5000/tasks/add/${userId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
            task: task.value,
            date: '2024-1-23',
            })
        });;

    const data = await response.json();

    if(response.status === 200){
        return data;
    } 

    return response.status;
}

export async function getTasks(userId, token){ 
    const response1 = await fetch(`http://localhost:5000/getTasks/${userId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

    const data = await response1.json();

    if(response1.status === 200){
        return data;
    }

    return response1.status;
}

export async function removeTask(userId, taskId, token){
    const response = await fetch(`http://localhost:5000/removeTasks/${userId}/${taskId}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    return response.status;
}

